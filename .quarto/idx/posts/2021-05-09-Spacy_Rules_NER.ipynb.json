{"title":"How to Leverage Spacy Rules NER","markdown":{"yaml":{"aliases":["/spacy/NER/2021/05/09/Spacy_Rules_NER"],"author":"Senthil Kumar","badges":true,"branch":"master","categories":["NLP","Coding","Python"],"date":"2021-05-09","description":"This blog post outlines the important features in Spacy Rules NER","hide":false,"image":"images/spacy/spacy_nlp_pipeline.png","output-file":"2021-05-09-spacy_rules_ner.html","title":"How to Leverage Spacy Rules NER","toc":true},"headingText":"Introduction to SpaCy and NER","containsRefs":false,"markdown":"\n\n\n\n\n### About SpaCy\n- SpaCy is a NLP library offering easy-to-use Python API for many information extraction and machine learning tasks in text data\n- They are internally written in Cython and hence occupies low memory foot print with its `small` models and are quite fast with decent accuracy\n\n\n\nSource:\n- [more about spaCy](https://spacy.io/)\n\n### What is NER\n\n> Named-entity recognition (NER) (also known as (named) entity identification, entity chunking, and entity extraction) is `a subtask of information extraction` that seeks to locate and classify named entities mentioned in unstructured text into pre-defined categories\n\nSource: [Wikipedia Article on NER](https://en.wikipedia.org/wiki/Named-entity_recognition)\n\n> In information extraction, a named entity is a real-world object, such as a person, location, organization, product, etc., that can be denoted with a proper noun. <br>\n> For example, in the sentence - \"Biden is the president of the United States\", <br>\n> \"Biden\" and \"the United States\" are `named entities` (proper nouns). \"president\" is not a named entity\n\nSource: [Wikipedia Article on Named Entities](https://en.wikipedia.org/wiki/Named_entity)\n\n### The Spacy Version used here\n\n## 1. Basic Featues of SpaCy Rules NER\n\n### 1A. About Token Matcher\n- Spacy's Token `Matcher` lets you prepare Spacy Rules at token level invoking all complex\n- Example 1 from Spacy Documentation\n\n```python\npatterns = [\n    [{\"LOWER\": \"hello\"}, {\"IS_PUNCT\": True}, {\"LOWER\": \"world\"}], # captures any case variant of \"hello-world\", \"hello!world\"\n    [{\"LOWER\": \"hello\"}, {\"LOWER\": \"world\"}] # captures any case variant of \"hello world\"\n]\n```\n\n- Example 2 using Token-level Regex\n\n```python\npattern = [{\"TEXT\": {\"REGEX\": \"^[Uu](\\.?|nited)$\"}}, #\n           {\"TEXT\": {\"REGEX\": \"^[Ss](\\.?|tates)$\"}},\n           {\"LOWER\": \"president\"}] # captures (U.S or US or United States or united states) President\n```\n\n### 1B. About Phrase Matcher\n\n- If we have a huge list of phrases in a list or in a csv file, phrase matcher can be applied directly \n\n```python\nimport spacy\nfrom spacy.matcher import PhraseMatcher\n\nnlp = spacy.load(\"en_core_web_sm\")\nmatcher = PhraseMatcher(nlp.vocab)\nterms = [\"Barack Obama\", \"Angela Merkel\", \"Washington, D.C.\"]\n# Only run nlp.make_doc to speed things up\npatterns = [nlp.make_doc(text) for text in terms]\nmatcher.add(\"TerminologyList\", patterns)\n\ndoc = nlp(\"German Chancellor Angela Merkel and US President Barack Obama \"\n          \"converse in the Oval Office inside the White House in Washington, D.C.\")\nmatches = matcher(doc)\nfor match_id, start, end in matches:\n    span = doc[start:end]\n    print(span.text)\n```\nsource: https://spacy.io/usage/rule-based-matching#adding-phrase-patterns\n\n### 1C. Explaining Token and Phrase Matchers with a `MODEL_NAMES NER` Capture\n\n## 2. Externalizing Rules from Codes\n\n### 2A. Saving spacy rules in a json format\n\n> Note that the official spacy document advocates josnl format but json is much more readable for multitoken spacy patterns \n\n### 2B. Prepare an Entity Ruler loading rules from a json\n\n### 2C. Testing on Sample Phone Sentences \n\n> Some of the phone patterns are not captured using the above patterns, let us add a Phone `regex` that cuts across multiple tokens\n\n## 3. Advanced Features in Spacy Rules NER\n\n### 3A. Adding RegEx patterns as a custom component\n\n> By adding the custom component, we are able to capture the missed out sentences also\n\n### 3B. Chaining Spacy NER components\n> Chaining spacy NER components makes the patterns more manageable <br>\n> It is similar to modular programming but for building a complex spacy NER rules\n\n*Let us discuss creation of a first degree NER + second degree NER (chaining NER) written on top of first degree NER entities*\n\nIt is better to train a model for `ADDRESS` entity.<br>\nBut for the sake of explanation of the `Chiaining NER` technique, let us build an ADDRESS NER using spacy rules\n\n## 4. How to save Rules NER as a package\n\n- Save the rules ner model `phone_nlp` to a physical location using `nlp.to_disk`\n- Save the custom components in a py file  `spacy_rules_ner/phone_functions.py`\n- use `python -m spacy package input_dir output_dir --code location/to/custom_components.py --name new_model_name` to generate `.tar.gz` format package\n- Pip install the tar.gz file using `pip install location/to/tar.gz`\n- `spacy.load('new_model_name')` will load your package with custom components\n\n> The generated `tar.gz` files can be shared and pip installed\n\n## 5. Conclusion\n\n- By building ner rules models for `MODEL_NAMES`, `PHONE` and `ADDRESS` entities we discussed the following concepts:\n    - Spacy's Token Matcher, Phrase Matcher and our own custom component Regex Matcher\n    - How to load Spacy patterns from a json file\n    - How to chain NER entities\n    - How to save and load ner pipeline with custome component\n\n## References\n\n- Spacy Rules based Matching | [link](https://spacy.io/usage/rule-based-matching)\n","srcMarkdownNoYaml":"\n\n\n\n## Introduction to SpaCy and NER\n\n### About SpaCy\n- SpaCy is a NLP library offering easy-to-use Python API for many information extraction and machine learning tasks in text data\n- They are internally written in Cython and hence occupies low memory foot print with its `small` models and are quite fast with decent accuracy\n\n\n\nSource:\n- [more about spaCy](https://spacy.io/)\n\n### What is NER\n\n> Named-entity recognition (NER) (also known as (named) entity identification, entity chunking, and entity extraction) is `a subtask of information extraction` that seeks to locate and classify named entities mentioned in unstructured text into pre-defined categories\n\nSource: [Wikipedia Article on NER](https://en.wikipedia.org/wiki/Named-entity_recognition)\n\n> In information extraction, a named entity is a real-world object, such as a person, location, organization, product, etc., that can be denoted with a proper noun. <br>\n> For example, in the sentence - \"Biden is the president of the United States\", <br>\n> \"Biden\" and \"the United States\" are `named entities` (proper nouns). \"president\" is not a named entity\n\nSource: [Wikipedia Article on Named Entities](https://en.wikipedia.org/wiki/Named_entity)\n\n### The Spacy Version used here\n\n## 1. Basic Featues of SpaCy Rules NER\n\n### 1A. About Token Matcher\n- Spacy's Token `Matcher` lets you prepare Spacy Rules at token level invoking all complex\n- Example 1 from Spacy Documentation\n\n```python\npatterns = [\n    [{\"LOWER\": \"hello\"}, {\"IS_PUNCT\": True}, {\"LOWER\": \"world\"}], # captures any case variant of \"hello-world\", \"hello!world\"\n    [{\"LOWER\": \"hello\"}, {\"LOWER\": \"world\"}] # captures any case variant of \"hello world\"\n]\n```\n\n- Example 2 using Token-level Regex\n\n```python\npattern = [{\"TEXT\": {\"REGEX\": \"^[Uu](\\.?|nited)$\"}}, #\n           {\"TEXT\": {\"REGEX\": \"^[Ss](\\.?|tates)$\"}},\n           {\"LOWER\": \"president\"}] # captures (U.S or US or United States or united states) President\n```\n\n### 1B. About Phrase Matcher\n\n- If we have a huge list of phrases in a list or in a csv file, phrase matcher can be applied directly \n\n```python\nimport spacy\nfrom spacy.matcher import PhraseMatcher\n\nnlp = spacy.load(\"en_core_web_sm\")\nmatcher = PhraseMatcher(nlp.vocab)\nterms = [\"Barack Obama\", \"Angela Merkel\", \"Washington, D.C.\"]\n# Only run nlp.make_doc to speed things up\npatterns = [nlp.make_doc(text) for text in terms]\nmatcher.add(\"TerminologyList\", patterns)\n\ndoc = nlp(\"German Chancellor Angela Merkel and US President Barack Obama \"\n          \"converse in the Oval Office inside the White House in Washington, D.C.\")\nmatches = matcher(doc)\nfor match_id, start, end in matches:\n    span = doc[start:end]\n    print(span.text)\n```\nsource: https://spacy.io/usage/rule-based-matching#adding-phrase-patterns\n\n### 1C. Explaining Token and Phrase Matchers with a `MODEL_NAMES NER` Capture\n\n## 2. Externalizing Rules from Codes\n\n### 2A. Saving spacy rules in a json format\n\n> Note that the official spacy document advocates josnl format but json is much more readable for multitoken spacy patterns \n\n### 2B. Prepare an Entity Ruler loading rules from a json\n\n### 2C. Testing on Sample Phone Sentences \n\n> Some of the phone patterns are not captured using the above patterns, let us add a Phone `regex` that cuts across multiple tokens\n\n## 3. Advanced Features in Spacy Rules NER\n\n### 3A. Adding RegEx patterns as a custom component\n\n> By adding the custom component, we are able to capture the missed out sentences also\n\n### 3B. Chaining Spacy NER components\n> Chaining spacy NER components makes the patterns more manageable <br>\n> It is similar to modular programming but for building a complex spacy NER rules\n\n*Let us discuss creation of a first degree NER + second degree NER (chaining NER) written on top of first degree NER entities*\n\nIt is better to train a model for `ADDRESS` entity.<br>\nBut for the sake of explanation of the `Chiaining NER` technique, let us build an ADDRESS NER using spacy rules\n\n## 4. How to save Rules NER as a package\n\n- Save the rules ner model `phone_nlp` to a physical location using `nlp.to_disk`\n- Save the custom components in a py file  `spacy_rules_ner/phone_functions.py`\n- use `python -m spacy package input_dir output_dir --code location/to/custom_components.py --name new_model_name` to generate `.tar.gz` format package\n- Pip install the tar.gz file using `pip install location/to/tar.gz`\n- `spacy.load('new_model_name')` will load your package with custom components\n\n> The generated `tar.gz` files can be shared and pip installed\n\n## 5. Conclusion\n\n- By building ner rules models for `MODEL_NAMES`, `PHONE` and `ADDRESS` entities we discussed the following concepts:\n    - Spacy's Token Matcher, Phrase Matcher and our own custom component Regex Matcher\n    - How to load Spacy patterns from a json file\n    - How to chain NER entities\n    - How to save and load ner pipeline with custome component\n\n## References\n\n- Spacy Rules based Matching | [link](https://spacy.io/usage/rule-based-matching)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"2021-05-09-spacy_rules_ner.html","toc":true},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.336","theme":"cosmo","title-block-banner":true,"comments":{"utterances":{"repo":"senthilkumarm1901/QuartoBlogComments"}},"aliases":["/spacy/NER/2021/05/09/Spacy_Rules_NER"],"author":"Senthil Kumar","badges":true,"branch":"master","categories":["NLP","Coding","Python"],"date":"2021-05-09","description":"This blog post outlines the important features in Spacy Rules NER","hide":false,"image":"images/spacy/spacy_nlp_pipeline.png","title":"How to Leverage Spacy Rules NER"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}