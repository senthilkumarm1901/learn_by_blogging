{"title":"AWS Serverless Series - All about API Gateways","markdown":{"yaml":{"author":"Senthil Kumar","badges":true,"branch":"master","categories":["AWS"],"date":"2023-04-30","description":"This blog has my notes on the AWS Service - API Gateway","output-file":"2023-04-30-monthly-blog-reviews.html","title":"AWS Serverless Series - All about API Gateways","toc":true,"image":"images/monthly-blog-reviews/notes.png","draft":true},"headingText":"Agenda","containsRefs":false,"markdown":"\n\n\n- The Essential Theory behind API Gateways\n- A Brief Take on OpenAPI Specifications\n- How is AWS API Gateway service helpful in building an API First Approach to Mircroservices?\n- Recipe 1: Attaching API Gateway to S3\n- Recipe 2: Attaching API Gateway to Lambda which uploads a file to S3 (using `generated presigned url`)\n- Recipe 3: Attaching API Gateway to Lambda to query data from a table \n- Ease in securing your API Gateway\n\n# Agenda (new)\n\n- Understanding APIs and HTTP Requests\n- What is AWS API Gateway? Why is it important?\n- A Practical Approach to Learn and Implement API Gateway - Attach an API Gateway to an S3 Bucket (Recipe 1)\n(refer to the README.md here - /Users/senthilkumar.m/Library/CloudStorage/OneDrive-TOYOTAConnectedIndia/Learnings/aws_serverless_recipes/api_gateway/s3_integration_for_file_uploads/README.md)\n- The OpenAPI Route to Creating and Implementing AWS API Gateways\n    - The basics of OpenAPI \n    - Recipe 2: `Attaching API Gateway to Lambda to query data from a table`\n\n- The API-first approach to Software Development\n\n# The Essential Theory behind API Gateways\n\n## Understanding APIs - The Precursor Knowledge to API Gateways\n\n### 1. What is a Front-End (client-side) and a Back-End (server-side) of a Web Application?\n\n(pic to be re-drawn )\n![](https://assets.isu.pub/document-structure/230420045915-3626970f5fe74851ad203b0d481b651b/v1/a5322253bcb34d6e0e64c3160e21f0a0.jpeg)\nSource: [Backend for Frontend Architecture - The key to building scalable and maintenable Frontend Applications](https://issuu.com/mobileliveca/docs/backend_for_frontend_application_architecture_the_)\n\n#ToDo #ToReWrite\n```\n1.Client-Side: ==The client-side refers to the part of a web application that runs in the user’s browser.==\n\n\n2.Server-Side: ==While the client side focuses on the user experience and presentation, the server side handles behind-the-scenes processing and data management==.\n\n3.Databases: Web applications often require persistent data storage, and databases serve as a reliable solution. Server-side scripts communicate with databases to store and retrieve information, ensuring the persistence and accessibility of data across multiple sessions. Popular database management systems include MySQL, PostgreSQL, MongoDB, and SQLite.\n\n\nClient-side and server-side components interact through a client-server communication model (`HTTP Requests`. When a user interacts with a web page, the client-side technologies handle the user input and perform initial validations. Then, the client-side sends requests to the server-side for more complex operations, such as database access or external API calls. The server-side processes these requests, performs the necessary computations, retrieves data, and generates a response. This response is then sent back to the client-side, where it is rendered and presented to the user.\n```\nSource: Direct Copy-paste from https://medium.com/@destinyonuiri/understanding-the-differences-between-client-side-and-server-side-in-web-development-99f8e41bcfb3\n\n\n### 2. What is an API? \n\n![](https://planningpokerweb.com/wp-content/uploads/2023/08/What-is-an-API-non-tech-people.png)\nSource: [APIs: The unseen bridge in digital products for non-tech people](https://planningpokerweb.com/product-management/apis-the-unseen-bridge-in-digital-products-for-non-tech-people/)\n\n\n### 2. What are `HTTP Requests`?\n\n#ToDo #ToReWrite \n\nAnswer from ChatGPT: \n\n> HTTP (Hypertext Transfer Protocol) requests are **messages** sent by a client (such as a web browser, mobile app, or another server) to a server, typically to request or send data. These requests are fundamental to how the World Wide Web operates and are **the basis for communication between clients and servers**.\n\n\n\n```\nWhat are the Components of a HTTP request? \n1. Request Method\n\t1. GET (Retrieve a resource from the server)\n\t2. POST: Send data to the server (CREATE or UPDATE a resource) - for non-dempotent tasks (repeated identical tasks have different effects)\n\t3. PUT: Update a resource on the server (for idempotent tasks - repeated identical tasks should have the same effect); PUT request multiple times will have the same outcome as making it once, with no side effects\n\t4. DELETE: Delete a resource\n\n> For example, if you are updating or replacing the details of a user account, changing the content of a blog post, or modifying the properties of a product in an e-commerce store, PUT would be the appropriate method. However, if you are creating a new resource on the server, such as a new user account, blog post, or product, POST would be the appropriate method.\n\n\n2. Uniform Resource Identifier\n\t1. Could be a URL - Uniform Resource Allocator (that has `http` or `https` protocol, domain name and path)\n3. HTTP Version\n4. Headers (provided additional info about the request or the client making the request)\n\t1. Content Type \n\t2. Accept Type\n\t3. Authentication Tokens (Authorization)\n\t4. Cookies\n\t5. Origin\n\t6. Cache-control\n5. Body\n```\n\nIs there any other URI other than URLs? Can you give examples?\n- Apart from URL, there are URNs, Data URIs (used to represent images directly within the HTML or CSS files)\n\n---\n\n\n### 3. What is QueryString Parameters in the context of a HTTP request? Where is it used? Is it part of header?\n\nIn https://example.com/search?q=term&page=1, `q`  and `page` are query string parameters or query parameters\n\n\nQuery Parameters are used by API requests to have control over the data requested from the server\n\n`Query parameters are not part of the HTTP request header`\n\n---\n\n### 4. What is the difference between a HTTP API Request and a REST API request?\n\n\n```\n1. HTTP APIs are a type of API that use the HTTP protocol for communication between clients and servers.\n2. HTTP APIs can encompass a wide range of API designs and architectures, including both **RESTful and non-RESTful approaches**.\n```\n\n\n```\n1. RESTful APIs use standardized resource URIs and follow principles such as **statelessness**, meaning that each request from a client must contain all the information necessary to process the request, and servers don't maintain any client state between requests.\n2. RESTful APIs adhere to a set of architectural constraints defined by Roy Fielding in his doctoral dissertation, including client-server architecture, statelessness, cacheability, uniform interface, layered system, and code on demand (optional).\n```\n\n\nReal-time Communication: In some cases, non-RESTful APIs are used for real-time communication scenarios where RESTful APIs may not be well-suited. For example, WebSocket APIs enable bidirectional communication between clients and servers in real-time applications like chat applications or online gaming.\n\n---\n\n### 5. What are the different types of applications possible to be sent in the Body of a HTTP request? \n\n- TextData, \n- Binary Data\n- XML\n- JSON\n- HTML\n\n---\n\n### 6. Is there a HTTPS request? \n\nYes, HTTPS requests are HTTP request encrypted with SSL/TLS (Secure Sockets Layer/ Transport Layer Security) protocols \n\n\n---\n\nWe use HTTPS APIs when creating using API Gateways\n\n  \nIn AWS API Gateway, the default behavior is to create HTTPS APIs. However, you can specify the protocol when creating an API using the AWS CLI by providing the `--protocol-type`\n\n``\n```\naws apigateway create-rest-api --name MyApi --protocol-type HTTP\n```\n\n\n## What is AG?\n\n![image-2.png](attachment:image-2.png)\n\n> API Gateway is a AWS  acts a middle man (or like a door) between Client (mobile apps or Web browsers) that is making a request and the Server (the backend service like Lambda, EC2 instance, etc.,) that gives a response back. \n\n\n\n### Where is the AG used? <br> [#TODO]\n- AG is used\n    - in Serverless Applications (I have attached API Gateways to AWS Lambdas and those REST APIs get used in a  Frontend)\n    - in Legacy Applications \n    \n----\n\n### Different Parts of AG\n\n- 0. (Optional) Authorizer Piece\n- 1. Request Flow (**everything that happens before the request from client hits the backend service**)\n    - a. Method Request  \n    - b. Integration Request\n    \n- 2. Integration \n- 3. Response Flow (everything that happens from the resonse of backend service to when it is received by the client)\n\n![image.png](attachment:image.png)\n\n[source](https://prafulla-alok.medium.com/quick-notes-amazon-api-gateway-b5dafc960841)\n[source2](alexdebrie.com/posts/api-gateway-elements/)\n\n#### Request Flow - a. Method Request\n\n`method request` or the public interface of an API method in API gateway defines the `parameters` and `body` that an app developer must send in the requests to access the backend through the API\n\nIn `Method Request`, we validate  the following parameters of the HTTP API request\n\n\n\n- QueryStrings\n- Headers\n    - Authorization\n- Payloads\n\n\n#### Request Flow - c. Method Response\n\nIn `Method Response` \nwe define the status codes, headers and body models that an app developer should expect from API Gateway. \n\n### Types of APIs in API Gateway\n\napigateway vs apigatewayv2\n(source: https://www.pulumi.com/ai/answers/wc35D5ECVuvUu7xE6h5SxM/comparing-aws-api-gateway-and-api-gateway-v2)\n\n\n## HTTP API\n\nHTTP APIs are the best choice for building APIs that only require API proxy functionality.\n\n## REST API\n\nRestful APIs for require API proxy functionality and API management features.\n\n## Websocket API\n\nWebsocket API for building real-time two-way communication applications, such as chat apps and streaming dashboards.\n\n### A brief take on OpenAPI in API Gateways: \n\n```\nSo the API Gateway has a tight integration\n\nwith the OpenAPI specification.\n\nSo what is the OpenAPI specification?\n\nWell, it's a very common way to define REST APIs\n\nand the API definition itself is code.\n\nSo what you can do is that you create\n\nthis specification using the OpenAPI model 3.0\n\nand then you import that into the API gateway.\n```\n- Source: Udemy AWS Developer Associate course\n\n![image.png](attachment:image.png)\n\n### Recipes\n\n1. A Rest API endpoint to upload an object to S3 (directly). Max limit is 10 MB [medium blog on apigateay s3](https://sayed-imran.medium.com/aws-api-gateway-and-s3-integration-encouraging-the-correct-way-61b180c938a7)\n2. A Rest API endpoint attached to a lambda that generates a pre-signed url. Max limit is 5 TB per file object (S3's file size limit)\n3. A Res\n\nSources of this blog:\n\n\n- 1. Quick Notes | [link](https://prafulla-alok.medium.com/quick-notes-amazon-api-gateway-b5dafc960841)\n- 2. Main Features and Core Concepts | [link](https://medium.com/aws-lambda-serverless-developer-guide-with-hands/amazon-api-gateway-main-features-and-core-concepts-980e8cadef09)\n- 3. Definition of API Gateway AND Creating REST API with API Gateway | [link](https://cmakkaya.medium.com/what-is-an-api-and-the-amazon-api-gateway-creating-and-using-a-rest-api-with-amazon-api-gateway-d1b42cbb1037)\n- 4. Effortless API Management | [link](https://medium.com/cloud-native-daily/amazon-api-gateway-effortless-api-management-2bfa6e50f5ac)\n- 5. Why API Gateway is one of the best AWS Services | [link](https://pmc-a.medium.com/why-api-gateway-is-one-of-the-best-aws-services-eda44e736f2c)\n\n- 6. AWS API Gateway Interview Questions and Answers in 2024 https://mindmajix.com/aws-api-gateway-interview-questions\n- 7. Using AWS WAF to protect your APIs - Amazon API Gateway https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-aws-waf.html\n- 8. Amazon API Gateway | AWS Cheat Sheet - Digital Cloud Training https://digitalcloud.training/amazon-api-gateway/\n- 9. aws api gateway & lambda: multiple endpoint/functions vs single endpoint https://stackoverflow.com/questions/41425511/aws-api-gateway-lambda-multiple-endpoint-functions-vs-single-endpoint\n- 10. AWS Storage Gateway FAQs | Amazon Web Services https://aws.amazon.com/storagegateway/faqs/\n\nwhat are the benefits of attaching api gateway to aws services\n\nHere are some key benefits of attaching Amazon API Gateway to AWS services:\n\n- **Enables creating and deploying REST and WebSocket APIs** that expose AWS Lambda functions, Amazon EC2 services, or other AWS services as HTTP endpoints[1][3].\n\n- **Provides a single entry point for clients** to access multiple microservices or AWS resources[1]. This facilitates traffic management, monitoring, authentication and security for the APIs.\n\n- **Supports multiple AWS services as backend integrations** including Lambda, Amazon EC2, Amazon S3, Amazon DynamoDB, Amazon Kinesis, Amazon SNS, Amazon SQS, and more[1][2]. This allows building APIs on top of various AWS services.\n\n- **Offers features like caching, throttling, monitoring, versioning, and canary deployments** to manage and optimize API usage[3]. This helps ensure API performance and availability.\n\n- **Provides security features** like IAM policies, Lambda authorizers, Amazon Cognito user pools, and AWS WAF integration to control and secure access to your APIs[2][3].\n\n- **Enables defining usage plans and API keys** to meter and restrict access to your APIs[3]. This allows monetizing APIs.\n\n- **Simplifies API development** by handling tasks like traffic management, authorization, access control, monitoring, and API version management[3].\n\nSo in summary, API Gateway makes it easy to create, deploy, secure, monitor and scale APIs that access various AWS services, without managing any servers. It provides a comprehensive API management platform on top of AWS.\n\n\nSource: Question to Perplexity AI\n","srcMarkdownNoYaml":"\n\n# Agenda\n\n- The Essential Theory behind API Gateways\n- A Brief Take on OpenAPI Specifications\n- How is AWS API Gateway service helpful in building an API First Approach to Mircroservices?\n- Recipe 1: Attaching API Gateway to S3\n- Recipe 2: Attaching API Gateway to Lambda which uploads a file to S3 (using `generated presigned url`)\n- Recipe 3: Attaching API Gateway to Lambda to query data from a table \n- Ease in securing your API Gateway\n\n# Agenda (new)\n\n- Understanding APIs and HTTP Requests\n- What is AWS API Gateway? Why is it important?\n- A Practical Approach to Learn and Implement API Gateway - Attach an API Gateway to an S3 Bucket (Recipe 1)\n(refer to the README.md here - /Users/senthilkumar.m/Library/CloudStorage/OneDrive-TOYOTAConnectedIndia/Learnings/aws_serverless_recipes/api_gateway/s3_integration_for_file_uploads/README.md)\n- The OpenAPI Route to Creating and Implementing AWS API Gateways\n    - The basics of OpenAPI \n    - Recipe 2: `Attaching API Gateway to Lambda to query data from a table`\n\n- The API-first approach to Software Development\n\n# The Essential Theory behind API Gateways\n\n## Understanding APIs - The Precursor Knowledge to API Gateways\n\n### 1. What is a Front-End (client-side) and a Back-End (server-side) of a Web Application?\n\n(pic to be re-drawn )\n![](https://assets.isu.pub/document-structure/230420045915-3626970f5fe74851ad203b0d481b651b/v1/a5322253bcb34d6e0e64c3160e21f0a0.jpeg)\nSource: [Backend for Frontend Architecture - The key to building scalable and maintenable Frontend Applications](https://issuu.com/mobileliveca/docs/backend_for_frontend_application_architecture_the_)\n\n#ToDo #ToReWrite\n```\n1.Client-Side: ==The client-side refers to the part of a web application that runs in the user’s browser.==\n\n\n2.Server-Side: ==While the client side focuses on the user experience and presentation, the server side handles behind-the-scenes processing and data management==.\n\n3.Databases: Web applications often require persistent data storage, and databases serve as a reliable solution. Server-side scripts communicate with databases to store and retrieve information, ensuring the persistence and accessibility of data across multiple sessions. Popular database management systems include MySQL, PostgreSQL, MongoDB, and SQLite.\n\n\nClient-side and server-side components interact through a client-server communication model (`HTTP Requests`. When a user interacts with a web page, the client-side technologies handle the user input and perform initial validations. Then, the client-side sends requests to the server-side for more complex operations, such as database access or external API calls. The server-side processes these requests, performs the necessary computations, retrieves data, and generates a response. This response is then sent back to the client-side, where it is rendered and presented to the user.\n```\nSource: Direct Copy-paste from https://medium.com/@destinyonuiri/understanding-the-differences-between-client-side-and-server-side-in-web-development-99f8e41bcfb3\n\n\n### 2. What is an API? \n\n![](https://planningpokerweb.com/wp-content/uploads/2023/08/What-is-an-API-non-tech-people.png)\nSource: [APIs: The unseen bridge in digital products for non-tech people](https://planningpokerweb.com/product-management/apis-the-unseen-bridge-in-digital-products-for-non-tech-people/)\n\n\n### 2. What are `HTTP Requests`?\n\n#ToDo #ToReWrite \n\nAnswer from ChatGPT: \n\n> HTTP (Hypertext Transfer Protocol) requests are **messages** sent by a client (such as a web browser, mobile app, or another server) to a server, typically to request or send data. These requests are fundamental to how the World Wide Web operates and are **the basis for communication between clients and servers**.\n\n\n\n```\nWhat are the Components of a HTTP request? \n1. Request Method\n\t1. GET (Retrieve a resource from the server)\n\t2. POST: Send data to the server (CREATE or UPDATE a resource) - for non-dempotent tasks (repeated identical tasks have different effects)\n\t3. PUT: Update a resource on the server (for idempotent tasks - repeated identical tasks should have the same effect); PUT request multiple times will have the same outcome as making it once, with no side effects\n\t4. DELETE: Delete a resource\n\n> For example, if you are updating or replacing the details of a user account, changing the content of a blog post, or modifying the properties of a product in an e-commerce store, PUT would be the appropriate method. However, if you are creating a new resource on the server, such as a new user account, blog post, or product, POST would be the appropriate method.\n\n\n2. Uniform Resource Identifier\n\t1. Could be a URL - Uniform Resource Allocator (that has `http` or `https` protocol, domain name and path)\n3. HTTP Version\n4. Headers (provided additional info about the request or the client making the request)\n\t1. Content Type \n\t2. Accept Type\n\t3. Authentication Tokens (Authorization)\n\t4. Cookies\n\t5. Origin\n\t6. Cache-control\n5. Body\n```\n\nIs there any other URI other than URLs? Can you give examples?\n- Apart from URL, there are URNs, Data URIs (used to represent images directly within the HTML or CSS files)\n\n---\n\n\n### 3. What is QueryString Parameters in the context of a HTTP request? Where is it used? Is it part of header?\n\nIn https://example.com/search?q=term&page=1, `q`  and `page` are query string parameters or query parameters\n\n\nQuery Parameters are used by API requests to have control over the data requested from the server\n\n`Query parameters are not part of the HTTP request header`\n\n---\n\n### 4. What is the difference between a HTTP API Request and a REST API request?\n\n\n```\n1. HTTP APIs are a type of API that use the HTTP protocol for communication between clients and servers.\n2. HTTP APIs can encompass a wide range of API designs and architectures, including both **RESTful and non-RESTful approaches**.\n```\n\n\n```\n1. RESTful APIs use standardized resource URIs and follow principles such as **statelessness**, meaning that each request from a client must contain all the information necessary to process the request, and servers don't maintain any client state between requests.\n2. RESTful APIs adhere to a set of architectural constraints defined by Roy Fielding in his doctoral dissertation, including client-server architecture, statelessness, cacheability, uniform interface, layered system, and code on demand (optional).\n```\n\n\nReal-time Communication: In some cases, non-RESTful APIs are used for real-time communication scenarios where RESTful APIs may not be well-suited. For example, WebSocket APIs enable bidirectional communication between clients and servers in real-time applications like chat applications or online gaming.\n\n---\n\n### 5. What are the different types of applications possible to be sent in the Body of a HTTP request? \n\n- TextData, \n- Binary Data\n- XML\n- JSON\n- HTML\n\n---\n\n### 6. Is there a HTTPS request? \n\nYes, HTTPS requests are HTTP request encrypted with SSL/TLS (Secure Sockets Layer/ Transport Layer Security) protocols \n\n\n---\n\nWe use HTTPS APIs when creating using API Gateways\n\n  \nIn AWS API Gateway, the default behavior is to create HTTPS APIs. However, you can specify the protocol when creating an API using the AWS CLI by providing the `--protocol-type`\n\n``\n```\naws apigateway create-rest-api --name MyApi --protocol-type HTTP\n```\n\n\n## What is AG?\n\n![image-2.png](attachment:image-2.png)\n\n> API Gateway is a AWS  acts a middle man (or like a door) between Client (mobile apps or Web browsers) that is making a request and the Server (the backend service like Lambda, EC2 instance, etc.,) that gives a response back. \n\n\n\n### Where is the AG used? <br> [#TODO]\n- AG is used\n    - in Serverless Applications (I have attached API Gateways to AWS Lambdas and those REST APIs get used in a  Frontend)\n    - in Legacy Applications \n    \n----\n\n### Different Parts of AG\n\n- 0. (Optional) Authorizer Piece\n- 1. Request Flow (**everything that happens before the request from client hits the backend service**)\n    - a. Method Request  \n    - b. Integration Request\n    \n- 2. Integration \n- 3. Response Flow (everything that happens from the resonse of backend service to when it is received by the client)\n\n![image.png](attachment:image.png)\n\n[source](https://prafulla-alok.medium.com/quick-notes-amazon-api-gateway-b5dafc960841)\n[source2](alexdebrie.com/posts/api-gateway-elements/)\n\n#### Request Flow - a. Method Request\n\n`method request` or the public interface of an API method in API gateway defines the `parameters` and `body` that an app developer must send in the requests to access the backend through the API\n\nIn `Method Request`, we validate  the following parameters of the HTTP API request\n\n\n\n- QueryStrings\n- Headers\n    - Authorization\n- Payloads\n\n\n#### Request Flow - c. Method Response\n\nIn `Method Response` \nwe define the status codes, headers and body models that an app developer should expect from API Gateway. \n\n### Types of APIs in API Gateway\n\napigateway vs apigatewayv2\n(source: https://www.pulumi.com/ai/answers/wc35D5ECVuvUu7xE6h5SxM/comparing-aws-api-gateway-and-api-gateway-v2)\n\n\n## HTTP API\n\nHTTP APIs are the best choice for building APIs that only require API proxy functionality.\n\n## REST API\n\nRestful APIs for require API proxy functionality and API management features.\n\n## Websocket API\n\nWebsocket API for building real-time two-way communication applications, such as chat apps and streaming dashboards.\n\n### A brief take on OpenAPI in API Gateways: \n\n```\nSo the API Gateway has a tight integration\n\nwith the OpenAPI specification.\n\nSo what is the OpenAPI specification?\n\nWell, it's a very common way to define REST APIs\n\nand the API definition itself is code.\n\nSo what you can do is that you create\n\nthis specification using the OpenAPI model 3.0\n\nand then you import that into the API gateway.\n```\n- Source: Udemy AWS Developer Associate course\n\n![image.png](attachment:image.png)\n\n### Recipes\n\n1. A Rest API endpoint to upload an object to S3 (directly). Max limit is 10 MB [medium blog on apigateay s3](https://sayed-imran.medium.com/aws-api-gateway-and-s3-integration-encouraging-the-correct-way-61b180c938a7)\n2. A Rest API endpoint attached to a lambda that generates a pre-signed url. Max limit is 5 TB per file object (S3's file size limit)\n3. A Res\n\nSources of this blog:\n\n\n- 1. Quick Notes | [link](https://prafulla-alok.medium.com/quick-notes-amazon-api-gateway-b5dafc960841)\n- 2. Main Features and Core Concepts | [link](https://medium.com/aws-lambda-serverless-developer-guide-with-hands/amazon-api-gateway-main-features-and-core-concepts-980e8cadef09)\n- 3. Definition of API Gateway AND Creating REST API with API Gateway | [link](https://cmakkaya.medium.com/what-is-an-api-and-the-amazon-api-gateway-creating-and-using-a-rest-api-with-amazon-api-gateway-d1b42cbb1037)\n- 4. Effortless API Management | [link](https://medium.com/cloud-native-daily/amazon-api-gateway-effortless-api-management-2bfa6e50f5ac)\n- 5. Why API Gateway is one of the best AWS Services | [link](https://pmc-a.medium.com/why-api-gateway-is-one-of-the-best-aws-services-eda44e736f2c)\n\n- 6. AWS API Gateway Interview Questions and Answers in 2024 https://mindmajix.com/aws-api-gateway-interview-questions\n- 7. Using AWS WAF to protect your APIs - Amazon API Gateway https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-control-access-aws-waf.html\n- 8. Amazon API Gateway | AWS Cheat Sheet - Digital Cloud Training https://digitalcloud.training/amazon-api-gateway/\n- 9. aws api gateway & lambda: multiple endpoint/functions vs single endpoint https://stackoverflow.com/questions/41425511/aws-api-gateway-lambda-multiple-endpoint-functions-vs-single-endpoint\n- 10. AWS Storage Gateway FAQs | Amazon Web Services https://aws.amazon.com/storagegateway/faqs/\n\nwhat are the benefits of attaching api gateway to aws services\n\nHere are some key benefits of attaching Amazon API Gateway to AWS services:\n\n- **Enables creating and deploying REST and WebSocket APIs** that expose AWS Lambda functions, Amazon EC2 services, or other AWS services as HTTP endpoints[1][3].\n\n- **Provides a single entry point for clients** to access multiple microservices or AWS resources[1]. This facilitates traffic management, monitoring, authentication and security for the APIs.\n\n- **Supports multiple AWS services as backend integrations** including Lambda, Amazon EC2, Amazon S3, Amazon DynamoDB, Amazon Kinesis, Amazon SNS, Amazon SQS, and more[1][2]. This allows building APIs on top of various AWS services.\n\n- **Offers features like caching, throttling, monitoring, versioning, and canary deployments** to manage and optimize API usage[3]. This helps ensure API performance and availability.\n\n- **Provides security features** like IAM policies, Lambda authorizers, Amazon Cognito user pools, and AWS WAF integration to control and secure access to your APIs[2][3].\n\n- **Enables defining usage plans and API keys** to meter and restrict access to your APIs[3]. This allows monetizing APIs.\n\n- **Simplifies API development** by handling tasks like traffic management, authorization, access control, monitoring, and API version management[3].\n\nSo in summary, API Gateway makes it easy to create, deploy, secure, monitor and scale APIs that access various AWS services, without managing any servers. It provides a comprehensive API management platform on top of AWS.\n\n\nSource: Question to Perplexity AI\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"2023-04-30-monthly-blog-reviews.html","toc":true},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.336","theme":"cosmo","title-block-banner":true,"comments":{"utterances":{"repo":"senthilkumarm1901/QuartoBlogComments"}},"author":"Senthil Kumar","badges":true,"branch":"master","categories":["AWS"],"date":"2023-04-30","description":"This blog has my notes on the AWS Service - API Gateway","title":"AWS Serverless Series - All about API Gateways","image":"images/monthly-blog-reviews/notes.png","draft":true},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}