{"title":"SQL Fundamentals - Learnings from Kaggle Learn Google BigQuery SQL Course","markdown":{"yaml":{"author":"Senthil Kumar","badges":true,"branch":"master","categories":["Coding","SQL"],"date":"2022-10-12","description":"This blog holds my SQL notes from Kaggle.com/learn course on SQL Fundamentals","output-file":"2022-10-12-sql-fundamentals.html","title":"SQL Fundamentals - Learnings from Kaggle Learn Google BigQuery SQL Course","toc":true,"image":"images/sql/sqlite.jpeg"},"headingText":"Key points about SQL","containsRefs":false,"markdown":"\n\n\n- Structured Query Language to access data from Relational databases\n- Case Insensitive: <br>\n    - SQL keywords are by default set to **case insensitive** \n    - The names of the tables and columns specification are set to case insensitive on the SQL database server, \n    - However, it can be enabled and disabled by configuring the settings in SQL.\n\n### Common data types in SQL (sqlite) and most important in other SQL tools\n\n- NULL. The value is a NULL value.\n- INTEGER. The value is a signed integer, stored in 0, 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value.\n- REAL. The value is a floating point value, stored as an 8-byte IEEE floating point number.\n- TEXT. The value is a text string, stored using the database encoding (UTF-8, UTF-16BE or UTF-16LE).\n- BLOB. The value is a blob of data, stored exactly as it was input (image, audio, etc.,) <br>\n([source](https://www.sqlite.org/datatype3.html))\n\n### Types of Queries\n\n1. Query Type: <br>\n- `SELECT ... FROM ... WHERE` \n\n```sql\n    SELECT DISTINCT country\n    FROM `bigquery-public-data.openaq.global_air_quality`\n    WHERE unit = 'ppm'\n```\n\n2. Query Type: <br>\n- `SELECT ... FROM ... WHERE ... LIKE` \n\n```sql\n    SELECT DISTINCT country\n    FROM `bigquery-public-data.some_db.some_table`\n    WHERE unit LIKE '%bigquery%'\n```\n\n3. Query Type: <br>\n- `SELECT ... FROM ... GROUP BY ... HAVING ... `\n\n```sql\nSELECT parent, COUNT(1) AS NumPosts\nFROM `bigquery-public-data.hacker_news.comments`\nGROUP BY parent\nHAVING COUNT(1) > 10\n```\n\n4. Query Type: <br>\n- `SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY DESC|ASC`\n\n```sql\n    SELECT indicator_code, indicator_name, COUNT(indicator_code) as num_rows\n    FROM `bigquery-public-data.world_bank_intl_education.international_education`\n    WHERE year = 2016\n    GROUP BY indicator_code, indicator_name\n    HAVING num_rows >= 175\n    ORDER BY num_rows DESC\n```\n\n5. Query Type: (exploring SQL EXTRACT FROM datetime variables) <br>\n- `SELECT (EXTRACT DAYOFWEEK|MONTH|YEAR|DAYOFYEAR FROM time_stamp_column AS some_name FROM ... GROUP BY ... ORDER BY ... `\n\n```sql\nSELECT COUNT(consecutive_number) AS num_accidents, \n       EXTRACT(DAYOFWEEK FROM timestamp_of_crash) AS day_of_week\nFROM `bigquery-public-data.nhtsa_traffic_fatalities.accident_2015`\nGROUP BY day_of_week\nORDER BY num_accidents DESC\n```\n\nSource: [Bigquery docyumentation of available time_stamp related keywords](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions) \n\n6. Query Type: (CTE - Common Table Expression) <br>\n- `WITH TEMP AS (CTE) SELECT some_column FROM TEMP GROUP BY ... ORDER BY ...`\n\n```sql\n WITH time AS \n (\n     SELECT DATE(block_timestamp) AS trans_date\n     FROM `bigquery-public-data.crypto_bitcoin.transactions`\n )\n SELECT COUNT(1) AS transactions,\n        trans_date\n FROM time\n GROUP BY trans_date\n ORDER BY trans_date\n```\n\n7. Query Type: (JOIN): <br>\n- `SELECT table1.col1, table1.col2, table2.col1 FROM table1 INNER JOIN table2 ON table1.PRIMARY_KEY = table2.FOREIGN_KEY` <br>\n- A primary key is a column or a set of columns in a table whose values uniquely identify a row in the table\n- A foreign key is a column or a set of columns in a table whose values correspond to the values of the primary key in another table\n\n```sql\nSELECT a.owner_user_id AS user_id, COUNT(a.id) AS number_of_answers\nFROM `bigquery-public-data.stackoverflow.posts_questions` AS q\nINNER JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n    ON q.id = a.parent_id\nWHERE q.tags LIKE '%bigquery%'\nGROUP BY user_id\n```\n\n8. Query Type (`CREATE`, `DROP`, `INSERT`)\n\n```sql\nDROP TABLE IF EXISTS marks_data;\n\nCREATE TABLE marks_data (\n                        grade_class integer,\n                        marks integer integer,\n                        student_id integer PRIMARY_KEY,\n                        names text\n                        );\n                        \n-- If importing from a CSV                        \n-- SELECT IMPORT(\"path/to/grade_marks.csv\", \"CSV\", \"marks_data\");\n\nINSERT INTO marks_data VALUES(‘12’,78,'S56','Senthil')\n```\n\n9. Query Type (`sub_query`): <br>\n- Sub querying in FROM: `SELECT A, B FROM (select  tabl2.col1 AS A, tabl2.col2 AS B FROM table2)`\n- Sub quering in SELECT: `SELECT account, level, (SELECT AVG(level) FROM Players) AS avg_level FROM Players`\n- so many other varieties ... \n\n```sql\nSELECT grade_class, student_id, marks\nFROM \n(\nSELECT grade_class, marks, student_id, RANK() OVER(\n    PARTITION BY grade_class\n    ORDER BY marks\n    ) marks_rank\nFROM marks_data_2\n)\nWHERE marks_rank=3\n```\n","srcMarkdownNoYaml":"\n\n### Key points about SQL\n\n- Structured Query Language to access data from Relational databases\n- Case Insensitive: <br>\n    - SQL keywords are by default set to **case insensitive** \n    - The names of the tables and columns specification are set to case insensitive on the SQL database server, \n    - However, it can be enabled and disabled by configuring the settings in SQL.\n\n### Common data types in SQL (sqlite) and most important in other SQL tools\n\n- NULL. The value is a NULL value.\n- INTEGER. The value is a signed integer, stored in 0, 1, 2, 3, 4, 6, or 8 bytes depending on the magnitude of the value.\n- REAL. The value is a floating point value, stored as an 8-byte IEEE floating point number.\n- TEXT. The value is a text string, stored using the database encoding (UTF-8, UTF-16BE or UTF-16LE).\n- BLOB. The value is a blob of data, stored exactly as it was input (image, audio, etc.,) <br>\n([source](https://www.sqlite.org/datatype3.html))\n\n### Types of Queries\n\n1. Query Type: <br>\n- `SELECT ... FROM ... WHERE` \n\n```sql\n    SELECT DISTINCT country\n    FROM `bigquery-public-data.openaq.global_air_quality`\n    WHERE unit = 'ppm'\n```\n\n2. Query Type: <br>\n- `SELECT ... FROM ... WHERE ... LIKE` \n\n```sql\n    SELECT DISTINCT country\n    FROM `bigquery-public-data.some_db.some_table`\n    WHERE unit LIKE '%bigquery%'\n```\n\n3. Query Type: <br>\n- `SELECT ... FROM ... GROUP BY ... HAVING ... `\n\n```sql\nSELECT parent, COUNT(1) AS NumPosts\nFROM `bigquery-public-data.hacker_news.comments`\nGROUP BY parent\nHAVING COUNT(1) > 10\n```\n\n4. Query Type: <br>\n- `SELECT ... FROM ... WHERE ... GROUP BY ... HAVING ... ORDER BY DESC|ASC`\n\n```sql\n    SELECT indicator_code, indicator_name, COUNT(indicator_code) as num_rows\n    FROM `bigquery-public-data.world_bank_intl_education.international_education`\n    WHERE year = 2016\n    GROUP BY indicator_code, indicator_name\n    HAVING num_rows >= 175\n    ORDER BY num_rows DESC\n```\n\n5. Query Type: (exploring SQL EXTRACT FROM datetime variables) <br>\n- `SELECT (EXTRACT DAYOFWEEK|MONTH|YEAR|DAYOFYEAR FROM time_stamp_column AS some_name FROM ... GROUP BY ... ORDER BY ... `\n\n```sql\nSELECT COUNT(consecutive_number) AS num_accidents, \n       EXTRACT(DAYOFWEEK FROM timestamp_of_crash) AS day_of_week\nFROM `bigquery-public-data.nhtsa_traffic_fatalities.accident_2015`\nGROUP BY day_of_week\nORDER BY num_accidents DESC\n```\n\nSource: [Bigquery docyumentation of available time_stamp related keywords](https://cloud.google.com/bigquery/docs/reference/standard-sql/timestamp_functions) \n\n6. Query Type: (CTE - Common Table Expression) <br>\n- `WITH TEMP AS (CTE) SELECT some_column FROM TEMP GROUP BY ... ORDER BY ...`\n\n```sql\n WITH time AS \n (\n     SELECT DATE(block_timestamp) AS trans_date\n     FROM `bigquery-public-data.crypto_bitcoin.transactions`\n )\n SELECT COUNT(1) AS transactions,\n        trans_date\n FROM time\n GROUP BY trans_date\n ORDER BY trans_date\n```\n\n7. Query Type: (JOIN): <br>\n- `SELECT table1.col1, table1.col2, table2.col1 FROM table1 INNER JOIN table2 ON table1.PRIMARY_KEY = table2.FOREIGN_KEY` <br>\n- A primary key is a column or a set of columns in a table whose values uniquely identify a row in the table\n- A foreign key is a column or a set of columns in a table whose values correspond to the values of the primary key in another table\n\n```sql\nSELECT a.owner_user_id AS user_id, COUNT(a.id) AS number_of_answers\nFROM `bigquery-public-data.stackoverflow.posts_questions` AS q\nINNER JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n    ON q.id = a.parent_id\nWHERE q.tags LIKE '%bigquery%'\nGROUP BY user_id\n```\n\n8. Query Type (`CREATE`, `DROP`, `INSERT`)\n\n```sql\nDROP TABLE IF EXISTS marks_data;\n\nCREATE TABLE marks_data (\n                        grade_class integer,\n                        marks integer integer,\n                        student_id integer PRIMARY_KEY,\n                        names text\n                        );\n                        \n-- If importing from a CSV                        \n-- SELECT IMPORT(\"path/to/grade_marks.csv\", \"CSV\", \"marks_data\");\n\nINSERT INTO marks_data VALUES(‘12’,78,'S56','Senthil')\n```\n\n9. Query Type (`sub_query`): <br>\n- Sub querying in FROM: `SELECT A, B FROM (select  tabl2.col1 AS A, tabl2.col2 AS B FROM table2)`\n- Sub quering in SELECT: `SELECT account, level, (SELECT AVG(level) FROM Players) AS avg_level FROM Players`\n- so many other varieties ... \n\n```sql\nSELECT grade_class, student_id, marks\nFROM \n(\nSELECT grade_class, marks, student_id, RANK() OVER(\n    PARTITION BY grade_class\n    ORDER BY marks\n    ) marks_rank\nFROM marks_data_2\n)\nWHERE marks_rank=3\n```\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"2022-10-12-sql-fundamentals.html","toc":true},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.336","theme":"cosmo","title-block-banner":true,"comments":{"utterances":{"repo":"senthilkumarm1901/QuartoBlogComments"}},"author":"Senthil Kumar","badges":true,"branch":"master","categories":["Coding","SQL"],"date":"2022-10-12","description":"This blog holds my SQL notes from Kaggle.com/learn course on SQL Fundamentals","title":"SQL Fundamentals - Learnings from Kaggle Learn Google BigQuery SQL Course","image":"images/sql/sqlite.jpeg"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}