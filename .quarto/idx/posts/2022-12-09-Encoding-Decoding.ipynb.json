{"title":"Demystifying the basics of Encoding and Decoding in Python","markdown":{"yaml":{"author":"Senthil Kumar","badges":true,"branch":"master","categories":["Coding","Python"],"date":"2022-12-09","description":"A short blog on my experiences dealing with non-ASCII characters in Python 3","output-file":"2022-12-09-Encoding-Decoding.html","title":"Demystifying the basics of Encoding and Decoding in Python","toc":true,"image":"images/encode/encode-decode-py.png"},"headingText":"Basics of Encoding and Decoding","containsRefs":false,"markdown":"\n\n\n**What is a Unicode?**\n\n\n> Unicode is a unique number for every character irrespective of the spoken language (JP, En, Fr, etc.,) they come from or the programming language (Python, Java, etc.,) they are used in\n\n<hr>\n\n**What is the purpose of Unicode?**\n\n> There are innumerable number of languages in this world. Some follow the Latin writing system (English, French, Spanish, etc.,), and there are so many non-latin writing styles when we look at Asian languages. Unicodes are  unique numerical representations for each character of the known, major languages in the world. \n\n- The uniqueness of the unicodes help in transmission of information in digial channels\n\n\n**Again, What is encoding and decoding, if you wonder**\n\n- Computers transmit information in bytes. Encoding is the process of converting unicodes to bytes\n- Decoding is the process of converting bytes back to unicodes so humans can interpret\n\n\n**What is Unicode Character Set (UCS)**\n\n- For all major languages in the world, every unique character is assigned a unique value or \"code point\". This set of unique values, also representing emojis and other symbols, is the Unicode Character Set. Unicode includes characters from Latin, Greek, Cyrillic, Arabic, Hebrew, Chinese, Japanese, Korean, and many others.\n- Code points are typically represented in hexadecimal format, such as U+0041 for the Latin capital letter \"A\" or U+30A2 for the Japanese hiragana character \"ア\".\n\n**What are some of the commonly used Encoding techniques**\n\n| Encoding Type | Full Description                                   | Num of bits             | Where Used/Supported Character set                                                                           |\n| ------------- | -------------------------------------------------- | ----------------------- | ------------------------------------------------------------------------------------------------------------ |\n| ASCII         | American Standard Code for Information Interchange | 7 bits                  | For English text/ supports basic Latin letters, numbers and punctuation marks                                |\n| UTF-8         | Unicode Transformation Format                      | variable-length min 8 bits  | Can support multiple languages; 8 bits for most ASCII characters; Supports upto 32 bits for some characters |\n| UTF-16        | Unicode Transformation Format                      | variable-length min 16 bits | Commonly used for applications which require multi-lang support                                              |\n| Latin-1       | ISO-8859-1 or Western European Encoding            | 8 bits                  | Limited to Western European languages and does not cover entire unicode characters set                       |\n| UTF-32        |   Unicode Transformation Format                    |   fixed-length 32 bits  | Provides direct mapping between unicodes and characters; Less commonly used; High Storage                                                                                                              |\n\n: Encoding Table\n\n## Encoding and Decoding Strings in Python\n\n- In Python, all strings by default are `Unicode` strings\n- If it is unicode, computer reads it by \"encoding\" into a byte string\n- By default, Python uses `utf-8` encoding. You can also encode in `utf-16`\n\n```python\nbyte_string = \"センティル・クマール\".encode()\nbyte_string\n```\n\n```bash\nb'\\xe3\\x82\\xbb\\xe3\\x83\\xb3\\xe3\\x83\\x86\\xe3\\x82\\xa3\\xe3\\x83\\xab\\xe3\\x83\\xbb\\xe3\\x82\\xaf\\xe3\\x83\\x9e\\xe3\\x83\\xbc\\xe3\\x83\\xab'\n```\n\n\n```python\nbyte_string_utf16 = \"センティル・クマール\".encode('utf-16')\nbyte_string_utf16\n```\n\n```bash\nb'\\xff\\xfe\\xbb0\\xf30\\xc60\\xa30\\xeb0\\xfb0\\xaf0\\xde0\\xfc0\\xeb0'\n```\n\n```python\nprint(byte_string.decode())\nprint(byte_string_utf16.decode('utf-16'))\n```\n\n```bash\nセンティル・クマール\nセンティル・クマール\n```\n\n\n### About Byte Strings in Python \n\n> Byte strings are used to represent binary data, such as images, audio files, or serialized objects. Binary data is not directly representable as text and needs to be stored and processed as a sequence of bytes.\n\n```python\n>> type(byte_string)\nbytes\n```\n\n- It is possible to save the byte strings directly in python using the prefix \"b\"\n\n```python\n>> forced_byte_string = b\"some_string\"\n>> type(forced_byte_string)\nbytes\n```\n\n- It is NOT possible to save Non-ASCII characters as byte strings\n\n```python\nforced_byte_string = b\"センティル・クマール\"\n```\n\n```bash\nSyntaxError: bytes can only contain ASCII literal characters.\n```\n\n- One example of using byte strings is when we serialize objects (such as python objects) using pickle module \n\n```python\n\nimport pickle\nan_example_dict = {\n  \"English\": \"Senthil Kumar\", \n  \"Japanese\": \"センティル・クマール\",\n  \"Chinese\": \"森蒂尔·库马尔\",\n  \"Korean\": \"센틸 쿠마르\",\n  \"Arabic\": \"سينتيل كومار\",\n  \"Urdu\": \"سینتھل کمار\"\n}\n\nserialized_data = pickle.dumps(an_example_dict)\nprint(type(serialized_data))\n\nwith open(\"serialized_dict.pkl\", \"wb\") as file:\n    file.write(serialized_data)\n```\n\n```bash\nbytes\n```\n\n## Encoding and Decoding  Files in Python\n\n### Saving Text Files in `ASCII`  and `UTF` Formats\n\n- The below code will throw NO error, because it is a English only text\n\n```python\nnormal_text = 'Hot: Microsoft Surface Pro 4 Tablet Intel Core i7 8GB RAM 256GB.. now Pound 1079.00! #SpyPrice #Microsoft'\nwith open(\"saving_eng__only_text.txt\",\"w\",encoding=\"ascii\") as f:\n    f.write(normal_text)\n```\n\n<hr>\n\n- The below code will throw an error, because you have latin character \"£\"\n\n```python\nnon_ascii_text = 'Hot: Microsoft Surface Pro 4 Tablet Intel Core i7 8GB RAM 256GB.. now £1079.00! #SpyPrice #Microsoft'with open(\"saving_eng__only_text.txt\",\"w\",encoding=\"ascii\") as f:\n    f.write(non_ascii_text)\n```\n\n```bash\n---------------------------------------------------------------------------\nUnicodeEncodeError                        Traceback (most recent call last)\nInput In [21], in <cell line: 1>()\n      1 with open(\"saving_a_latin_string.txt\",\"w\",encoding=\"ascii\") as f:\n----> 2     f.write(non_ascii_text)\n\nUnicodeEncodeError: 'ascii' codec can't encode character '\\xa3' in position 70: ordinal not in range(128)\n```\n\n- Changing the encoding to \"utf-8\" fixed the error\n\n```python\nwith open(\"saving_a_latin_string.txt\",\"w\",encoding=\"utf-8\") as f:\n    f.write(non_ascii_text )\n```\n\n<hr>\n\n### Saving `Non-ASCII` JSON Files in different formats\n\n1. Saving a dict using `json.dump`, utf-8 encoding\n2. Saving the same dict as a json_string using `json.dumps`, utf-8 encoding\n3. Saving the same dict using `json.dump`, utf-16 encoding\n\n```python\nimport json\nan_example_dict = {\n  \"English\": \"Senthil Kumar\", \n  \"Japanese\": \"センティル・クマール\",\n  \"Chinese\": \"森蒂尔·库马尔\",\n  \"Korean\": \"센틸 쿠마르\",\n  \"Arabic\": \"سينتيل كومار\",\n  \"Urdu\": \"سینتھل کمار\"\n}\n\nwith open(\"saving_the_names_dict_utf8.json\",\"w\",encoding=\"utf-8\") as f:\n    json.dump(an_example_dict, f,ensure_ascii=False)\n\nan_example_dict_str = json.dumps(an_example_dict,ensure_ascii=False)\nwith open(\"saving_the_names_dict_utf8_using_json_string.json\",\"w\",encoding=\"utf-8\") as f:\n    f.write(an_example_dict_str)\n    \nwith open(\"saving_the_names_dict_utf16.json\",\"w\",encoding=\"utf-16\") as f:\n    json.dump(an_example_dict, f,ensure_ascii=False)\n```\n\n- How to load the dict?\n\n```python\nwith open(\"saving_the_names_dict_utf8.json\",\"r\",encoding=\"utf-8\") as f:\n    loaded_dict = json.load(f)\n\nprint(loaded_dict)\n```\n\n```bash\n{'English': 'Senthil Kumar', 'Japanese': 'センティル・クマール', 'Chinese': '森蒂尔·库马尔', 'Korean': '센틸 쿠마르', 'Arabic': 'سينتيل كومار', 'Urdu': 'سینتھل کمار'}\n```\n\n```bash\n>> cat saving_the_names_dict_utf8.json\n{\"English\": \"Senthil Kumar\", \"Japanese\": \"センティル・クマール\", \"Chinese\": \"森蒂尔·库马尔\", \"Korean\": \"센틸 쿠마르\", \"Arabic\": \"سينتيل كومار\", \"Urdu\": \"سینتھل کمار\"}\n>> echo \"the file size:\" && du -hs saving_the_names_dict.json\n```\n\n```bash\necho \"the utf8 file size in bytes:\" && wc -c saving_the_names_dict_utf8.json \necho \"the utf8 file size in bytes:\" && wc -c saving_the_names_dict_utf8_using_json_string.json\necho \"the utf16 file size in bytes:\" && wc -c saving_the_names_dict_utf16.json\n\nthe utf8 file size in bytes:\n     209 saving_the_names_dict_utf8.json\nthe utf8 file size in bytes:\n     209 saving_the_names_dict_utf8_using_json_string.json\nthe utf16 file size in bytes:\n     292 saving_the_names_dict_utf16.json\n```\n\n**Conclusion**:\n- In the example above, the byte size of `utf16` file is more than that of `utf8` file\n\n## Conclusion\n- Use `utf8` everywhere | [check more here](http://utf8everywhere.org/)\n    - UTF-8 can be used to encode anything that UTF-16 can. So most of the usecases can be met with utf-8. \n    - UTF-16 starts with a minimum of 2 bytes (16-bits) and hence not compatible with 7 bit ASCII. But UTF-8 is backwards compatible  with ASCII.\n\n## Good Sources\n- Why UTF-8 should be used?\n    - https://stackoverflow.com/a/18231475\n    - http://utf8everywhere.org/\n- Other good resources\n    - Encoding-Decoding in Python 3 https://www.pythoncentral.io/encoding-and-decoding-strings-in-python-3-x/\n","srcMarkdownNoYaml":"\n\n## Basics of Encoding and Decoding\n\n**What is a Unicode?**\n\n\n> Unicode is a unique number for every character irrespective of the spoken language (JP, En, Fr, etc.,) they come from or the programming language (Python, Java, etc.,) they are used in\n\n<hr>\n\n**What is the purpose of Unicode?**\n\n> There are innumerable number of languages in this world. Some follow the Latin writing system (English, French, Spanish, etc.,), and there are so many non-latin writing styles when we look at Asian languages. Unicodes are  unique numerical representations for each character of the known, major languages in the world. \n\n- The uniqueness of the unicodes help in transmission of information in digial channels\n\n\n**Again, What is encoding and decoding, if you wonder**\n\n- Computers transmit information in bytes. Encoding is the process of converting unicodes to bytes\n- Decoding is the process of converting bytes back to unicodes so humans can interpret\n\n\n**What is Unicode Character Set (UCS)**\n\n- For all major languages in the world, every unique character is assigned a unique value or \"code point\". This set of unique values, also representing emojis and other symbols, is the Unicode Character Set. Unicode includes characters from Latin, Greek, Cyrillic, Arabic, Hebrew, Chinese, Japanese, Korean, and many others.\n- Code points are typically represented in hexadecimal format, such as U+0041 for the Latin capital letter \"A\" or U+30A2 for the Japanese hiragana character \"ア\".\n\n**What are some of the commonly used Encoding techniques**\n\n| Encoding Type | Full Description                                   | Num of bits             | Where Used/Supported Character set                                                                           |\n| ------------- | -------------------------------------------------- | ----------------------- | ------------------------------------------------------------------------------------------------------------ |\n| ASCII         | American Standard Code for Information Interchange | 7 bits                  | For English text/ supports basic Latin letters, numbers and punctuation marks                                |\n| UTF-8         | Unicode Transformation Format                      | variable-length min 8 bits  | Can support multiple languages; 8 bits for most ASCII characters; Supports upto 32 bits for some characters |\n| UTF-16        | Unicode Transformation Format                      | variable-length min 16 bits | Commonly used for applications which require multi-lang support                                              |\n| Latin-1       | ISO-8859-1 or Western European Encoding            | 8 bits                  | Limited to Western European languages and does not cover entire unicode characters set                       |\n| UTF-32        |   Unicode Transformation Format                    |   fixed-length 32 bits  | Provides direct mapping between unicodes and characters; Less commonly used; High Storage                                                                                                              |\n\n: Encoding Table\n\n## Encoding and Decoding Strings in Python\n\n- In Python, all strings by default are `Unicode` strings\n- If it is unicode, computer reads it by \"encoding\" into a byte string\n- By default, Python uses `utf-8` encoding. You can also encode in `utf-16`\n\n```python\nbyte_string = \"センティル・クマール\".encode()\nbyte_string\n```\n\n```bash\nb'\\xe3\\x82\\xbb\\xe3\\x83\\xb3\\xe3\\x83\\x86\\xe3\\x82\\xa3\\xe3\\x83\\xab\\xe3\\x83\\xbb\\xe3\\x82\\xaf\\xe3\\x83\\x9e\\xe3\\x83\\xbc\\xe3\\x83\\xab'\n```\n\n\n```python\nbyte_string_utf16 = \"センティル・クマール\".encode('utf-16')\nbyte_string_utf16\n```\n\n```bash\nb'\\xff\\xfe\\xbb0\\xf30\\xc60\\xa30\\xeb0\\xfb0\\xaf0\\xde0\\xfc0\\xeb0'\n```\n\n```python\nprint(byte_string.decode())\nprint(byte_string_utf16.decode('utf-16'))\n```\n\n```bash\nセンティル・クマール\nセンティル・クマール\n```\n\n\n### About Byte Strings in Python \n\n> Byte strings are used to represent binary data, such as images, audio files, or serialized objects. Binary data is not directly representable as text and needs to be stored and processed as a sequence of bytes.\n\n```python\n>> type(byte_string)\nbytes\n```\n\n- It is possible to save the byte strings directly in python using the prefix \"b\"\n\n```python\n>> forced_byte_string = b\"some_string\"\n>> type(forced_byte_string)\nbytes\n```\n\n- It is NOT possible to save Non-ASCII characters as byte strings\n\n```python\nforced_byte_string = b\"センティル・クマール\"\n```\n\n```bash\nSyntaxError: bytes can only contain ASCII literal characters.\n```\n\n- One example of using byte strings is when we serialize objects (such as python objects) using pickle module \n\n```python\n\nimport pickle\nan_example_dict = {\n  \"English\": \"Senthil Kumar\", \n  \"Japanese\": \"センティル・クマール\",\n  \"Chinese\": \"森蒂尔·库马尔\",\n  \"Korean\": \"센틸 쿠마르\",\n  \"Arabic\": \"سينتيل كومار\",\n  \"Urdu\": \"سینتھل کمار\"\n}\n\nserialized_data = pickle.dumps(an_example_dict)\nprint(type(serialized_data))\n\nwith open(\"serialized_dict.pkl\", \"wb\") as file:\n    file.write(serialized_data)\n```\n\n```bash\nbytes\n```\n\n## Encoding and Decoding  Files in Python\n\n### Saving Text Files in `ASCII`  and `UTF` Formats\n\n- The below code will throw NO error, because it is a English only text\n\n```python\nnormal_text = 'Hot: Microsoft Surface Pro 4 Tablet Intel Core i7 8GB RAM 256GB.. now Pound 1079.00! #SpyPrice #Microsoft'\nwith open(\"saving_eng__only_text.txt\",\"w\",encoding=\"ascii\") as f:\n    f.write(normal_text)\n```\n\n<hr>\n\n- The below code will throw an error, because you have latin character \"£\"\n\n```python\nnon_ascii_text = 'Hot: Microsoft Surface Pro 4 Tablet Intel Core i7 8GB RAM 256GB.. now £1079.00! #SpyPrice #Microsoft'with open(\"saving_eng__only_text.txt\",\"w\",encoding=\"ascii\") as f:\n    f.write(non_ascii_text)\n```\n\n```bash\n---------------------------------------------------------------------------\nUnicodeEncodeError                        Traceback (most recent call last)\nInput In [21], in <cell line: 1>()\n      1 with open(\"saving_a_latin_string.txt\",\"w\",encoding=\"ascii\") as f:\n----> 2     f.write(non_ascii_text)\n\nUnicodeEncodeError: 'ascii' codec can't encode character '\\xa3' in position 70: ordinal not in range(128)\n```\n\n- Changing the encoding to \"utf-8\" fixed the error\n\n```python\nwith open(\"saving_a_latin_string.txt\",\"w\",encoding=\"utf-8\") as f:\n    f.write(non_ascii_text )\n```\n\n<hr>\n\n### Saving `Non-ASCII` JSON Files in different formats\n\n1. Saving a dict using `json.dump`, utf-8 encoding\n2. Saving the same dict as a json_string using `json.dumps`, utf-8 encoding\n3. Saving the same dict using `json.dump`, utf-16 encoding\n\n```python\nimport json\nan_example_dict = {\n  \"English\": \"Senthil Kumar\", \n  \"Japanese\": \"センティル・クマール\",\n  \"Chinese\": \"森蒂尔·库马尔\",\n  \"Korean\": \"센틸 쿠마르\",\n  \"Arabic\": \"سينتيل كومار\",\n  \"Urdu\": \"سینتھل کمار\"\n}\n\nwith open(\"saving_the_names_dict_utf8.json\",\"w\",encoding=\"utf-8\") as f:\n    json.dump(an_example_dict, f,ensure_ascii=False)\n\nan_example_dict_str = json.dumps(an_example_dict,ensure_ascii=False)\nwith open(\"saving_the_names_dict_utf8_using_json_string.json\",\"w\",encoding=\"utf-8\") as f:\n    f.write(an_example_dict_str)\n    \nwith open(\"saving_the_names_dict_utf16.json\",\"w\",encoding=\"utf-16\") as f:\n    json.dump(an_example_dict, f,ensure_ascii=False)\n```\n\n- How to load the dict?\n\n```python\nwith open(\"saving_the_names_dict_utf8.json\",\"r\",encoding=\"utf-8\") as f:\n    loaded_dict = json.load(f)\n\nprint(loaded_dict)\n```\n\n```bash\n{'English': 'Senthil Kumar', 'Japanese': 'センティル・クマール', 'Chinese': '森蒂尔·库马尔', 'Korean': '센틸 쿠마르', 'Arabic': 'سينتيل كومار', 'Urdu': 'سینتھل کمار'}\n```\n\n```bash\n>> cat saving_the_names_dict_utf8.json\n{\"English\": \"Senthil Kumar\", \"Japanese\": \"センティル・クマール\", \"Chinese\": \"森蒂尔·库马尔\", \"Korean\": \"센틸 쿠마르\", \"Arabic\": \"سينتيل كومار\", \"Urdu\": \"سینتھل کمار\"}\n>> echo \"the file size:\" && du -hs saving_the_names_dict.json\n```\n\n```bash\necho \"the utf8 file size in bytes:\" && wc -c saving_the_names_dict_utf8.json \necho \"the utf8 file size in bytes:\" && wc -c saving_the_names_dict_utf8_using_json_string.json\necho \"the utf16 file size in bytes:\" && wc -c saving_the_names_dict_utf16.json\n\nthe utf8 file size in bytes:\n     209 saving_the_names_dict_utf8.json\nthe utf8 file size in bytes:\n     209 saving_the_names_dict_utf8_using_json_string.json\nthe utf16 file size in bytes:\n     292 saving_the_names_dict_utf16.json\n```\n\n**Conclusion**:\n- In the example above, the byte size of `utf16` file is more than that of `utf8` file\n\n## Conclusion\n- Use `utf8` everywhere | [check more here](http://utf8everywhere.org/)\n    - UTF-8 can be used to encode anything that UTF-16 can. So most of the usecases can be met with utf-8. \n    - UTF-16 starts with a minimum of 2 bytes (16-bits) and hence not compatible with 7 bit ASCII. But UTF-8 is backwards compatible  with ASCII.\n\n## Good Sources\n- Why UTF-8 should be used?\n    - https://stackoverflow.com/a/18231475\n    - http://utf8everywhere.org/\n- Other good resources\n    - Encoding-Decoding in Python 3 https://www.pythoncentral.io/encoding-and-decoding-strings-in-python-3-x/\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"2022-12-09-Encoding-Decoding.html","toc":true},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.336","theme":"cosmo","title-block-banner":true,"comments":{"utterances":{"repo":"senthilkumarm1901/QuartoBlogComments"}},"author":"Senthil Kumar","badges":true,"branch":"master","categories":["Coding","Python"],"date":"2022-12-09","description":"A short blog on my experiences dealing with non-ASCII characters in Python 3","title":"Demystifying the basics of Encoding and Decoding in Python","image":"images/encode/encode-decode-py.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}