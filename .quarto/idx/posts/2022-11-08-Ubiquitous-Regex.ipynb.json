{"title":"An Ode to the Ubiquitous Regex","markdown":{"yaml":{"author":"Senthil Kumar","badges":true,"branch":"master","categories":["Coding","Python"],"date":"2022-11-08","description":"A selected list of confusing Regex Patterns that helped me learn its working better","output-file":"2022-11-08-ubiquitous-regex.html","title":"An Ode to the Ubiquitous Regex","toc":true,"image":"images/regex/regex.jpeg"},"headingText":"What is RegEx?","containsRefs":false,"markdown":"\n\n- Regular Expressions are a language of their own for matching patterns \n- They are highly useful in text data processing\n\n\nThe official Python source defines the Regex in the following way: \n\n> An expression containing 'meta' characters and literals to identify and/or replace a pattern matching that expression\n> **Meta Characters**: these characters have a special meaning\n> **Literals**: these characters are the actual characters that are to be matched\n\nUse Cases\n- To search a string pattern\n- To split a string based on a pattern\n- To replace a part of the string\n\n# A Selected List of Advanced Regex Usages in Python\n\n## Case 1: Extract Username and Domain from Email\n- `Key Concepts`: Use of `group()` attribute in `re.search` and numbered captures using proper paranthesis\n- `pattern`: \"(\\w+)\\.(\\w+)@(\\w+)\\.\\w+\"\n\n```python\nemail = \"senthil.kumar@gutszen.com\"\npattern = \"(\\w+)\\.(\\w+)@(\\w+)\\.\\w+\"\nmatch = re.search(pattern, email)\nif match:\n    first_name = match.group(1)\n    last_name = match.group(2)\n    company = match.group(3)\n    print(f\"first_name: {first_name}\")\n    print(f\"last_name: {last_name}\")\n    print(f\"company: {company}\")\n```\n\n```bash\nfirst_name: senthil\nlast_name: kumar\ncompany: gutszen\n```\n\n\n## Case 2: A Regex Gotcha - An example where `raw_string_literal` is needed\n- In most cases without or without a raw literal, the python pattern works fine. [stackoverflow comment](https://stackoverflow.com/a/63841278)\n- But for the followiing example where `text` is a raw literal string with a \\ in it\n\n```python\ntext = r\"Can you capture? this\\that\"\npattern = r\"\\w+\\\\\\w+\"\n\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"Matched String: {match}\")\n```\n\n\n```bash\nMatched String: this\\that\n```\n\n- What happens if I try below example where both text and pattern are devoid of raw literal?\n- Do notice the `hat` word in the end of the matches\n\n```python\ntext = \"Can you capture? this\\that\"\npattern = \"\\w+\\\\w+\"\n\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"Matched String: {match}\")\n```\n\n```bash\nMatched String: Can\nMatched String: you\nMatched String: capture\nMatched String: this\nMatched String: hat\n```\n\n- What if I try below example?\n- Do notice the capture of `this<tab_space>hat`\n\n```python\ntext = \"Can you capture? this\\that\"\npattern = r\"\\w+\\t\\w+\"\n\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"Matched String: {match}\")\n```\n\n```bash\nMatched String: this\that\n```\n\n## Case 3A: Importance of `Greedy` Operator !!\n\n- Use of `?` as a greedy operator\n\n```python\ntext = \"She said, 'Hello', and he replied, 'Hi'\"\npattern = \"'(.+?)'\"\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"Matched String: {match}\")\n```\n\n```bash\nMatched String: Hello\nMatched String: Hi\n```\n\n\n```python\ntext = \"She said, 'Hello', and he replied, 'Hi'\"\npattern = \"'(.+)'\"\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"Matched String: {match}\")\n```\n\n```bash\nMatched String: Hello', and he replied, 'Hi\n```\n\n## Case 3B: Importance of Escaping Paranthesis!!\n\n- What if you want to capture text within paranthesis?\n\n```python\ntext = \"She said, (Hello), and he replied, (Hi)\"\npattern = \"\\((.+?)\\)\"\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"Matched String: {match}\")\n```\n\n```bash\nMatched String: Hello\nMatched String: Hi\n```\n\n\n## Case 4: Splitting Sentences using Regex\n\n- Use of `[^<patterns>]` to look for Negative matches until we meet any of the `<patterns>`\n\n```python\ntext = \"Hello! My Name is Senthil. How are you doing?\"\npattern = r\"([^.?!]+[.?!])\"\nsentences = re.findall(pattern, text)\nfor sentence in sentences:\n    print(f\"Sentence: {sentence.strip()}\")\n```\n\n\n```bash\nSentence: Hello!\nSentence: My Name is Senthil.\nSentence: How are you doing?\n```\n\n\n## Case 5: Extraction of different URL Formats\n\n- Multiple Concepts: Operator OR `|`; `?` for 0 or 1 match; `[^/\\s]+` means anything but a `/` or a space\n\n```python\ntext = \"Visit my website at https://www.example.com and check out www.blog.example.com or http://blogspot.com\"\npattern = r\"https?://[^/\\s]+|www.[^/\\s]+\"\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"URL: {match}\")\n```\n\n\n```bash\nURL: https://www.example.com\nURL: www.blog.example.com\nURL: http://blogspot.com\n```\n\n# Where Regex Fails!\n\n## Bonus Case - The Repeating Patterns - Extracting html tags\n\n- The expectation for below python code is to capture all tags and and their contents. \n- But regex will capture only the outermost `<div>` tag\n\n```python\nhtml = \"<div><p>This is a paragraph</p><span>This is a span</span></div>\"\npattern = r\"<(.+?)>(.+?)</\\1>\"\nmatches = re.findall(pattern, html)\nfor match in matches:\n    tag = match[0]\n    content = match[1]\n    print(f\"Tag: {tag}, Content: {content}\")\n```\n\n\n```bash\nTag: div, Content: <p>This is a paragraph</p><span>This is a span</span>\n```\n\n\n## Best Solution - Use specific modules (avoid regex) \n- In this html parsing case, use `BeautifulSoup`\n\n```python\nfrom bs4 import BeautifulSoup\n\nhtml = \"<div><p>This is a paragraph</p><span>This is a span</span></div>\"\nsoup = BeautifulSoup(html, 'html.parser')\n\ndef process_tags(element):\n    if not element.name.startswith(r\"[\"):\n        print(f\"Tag: {element.name}, Content: {element.get_text()}\")\n    for child in element.children:\n        if child.name:\n            process_tags(child)\n\nprocess_tags(soup)\n```\n\n```bash\nTag: div, Content: This is a paragraphThis is a span\nTag: p, Content: This is a paragraph\nTag: span, Content: This is a span\n```\n\n## Insisting on a Regex Solution?\n\n```python\nfetch_tags_pattern = r\"\\<(\\w+)\\>\"\ntag_matches = re.findall(fetch_tags_pattern, html)\n\nfor tag in tag_matches:\n    tag_pattern = f\"<({tag})>(.*?)</{tag}>\"\n    matches = re.findall(tag_pattern, html)\n    for match in matches:\n        tag = match[0]\n        content = re.sub('(<.*?>)',' ',match[1])\n        print(f\"Tag: {tag}, Content: {content}\")\n```\n\n```bash\nTag: div, Content:  This is a paragraph  This is a span \nTag: p, Content: This is a paragraph\nTag: span, Content: This is a span\n```\n\n# Conclusion\n\n- I am sure, over years you had worked on Regex, you have many better examples\n- Like Bash Scripting, the key with Regex is to know when to stop trying it and use some other solution\n- Thank you for reading this blog piece, Happy Regexing !\n","srcMarkdownNoYaml":"\n\n# What is RegEx?\n- Regular Expressions are a language of their own for matching patterns \n- They are highly useful in text data processing\n\n\nThe official Python source defines the Regex in the following way: \n\n> An expression containing 'meta' characters and literals to identify and/or replace a pattern matching that expression\n> **Meta Characters**: these characters have a special meaning\n> **Literals**: these characters are the actual characters that are to be matched\n\nUse Cases\n- To search a string pattern\n- To split a string based on a pattern\n- To replace a part of the string\n\n# A Selected List of Advanced Regex Usages in Python\n\n## Case 1: Extract Username and Domain from Email\n- `Key Concepts`: Use of `group()` attribute in `re.search` and numbered captures using proper paranthesis\n- `pattern`: \"(\\w+)\\.(\\w+)@(\\w+)\\.\\w+\"\n\n```python\nemail = \"senthil.kumar@gutszen.com\"\npattern = \"(\\w+)\\.(\\w+)@(\\w+)\\.\\w+\"\nmatch = re.search(pattern, email)\nif match:\n    first_name = match.group(1)\n    last_name = match.group(2)\n    company = match.group(3)\n    print(f\"first_name: {first_name}\")\n    print(f\"last_name: {last_name}\")\n    print(f\"company: {company}\")\n```\n\n```bash\nfirst_name: senthil\nlast_name: kumar\ncompany: gutszen\n```\n\n\n## Case 2: A Regex Gotcha - An example where `raw_string_literal` is needed\n- In most cases without or without a raw literal, the python pattern works fine. [stackoverflow comment](https://stackoverflow.com/a/63841278)\n- But for the followiing example where `text` is a raw literal string with a \\ in it\n\n```python\ntext = r\"Can you capture? this\\that\"\npattern = r\"\\w+\\\\\\w+\"\n\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"Matched String: {match}\")\n```\n\n\n```bash\nMatched String: this\\that\n```\n\n- What happens if I try below example where both text and pattern are devoid of raw literal?\n- Do notice the `hat` word in the end of the matches\n\n```python\ntext = \"Can you capture? this\\that\"\npattern = \"\\w+\\\\w+\"\n\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"Matched String: {match}\")\n```\n\n```bash\nMatched String: Can\nMatched String: you\nMatched String: capture\nMatched String: this\nMatched String: hat\n```\n\n- What if I try below example?\n- Do notice the capture of `this<tab_space>hat`\n\n```python\ntext = \"Can you capture? this\\that\"\npattern = r\"\\w+\\t\\w+\"\n\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"Matched String: {match}\")\n```\n\n```bash\nMatched String: this\that\n```\n\n## Case 3A: Importance of `Greedy` Operator !!\n\n- Use of `?` as a greedy operator\n\n```python\ntext = \"She said, 'Hello', and he replied, 'Hi'\"\npattern = \"'(.+?)'\"\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"Matched String: {match}\")\n```\n\n```bash\nMatched String: Hello\nMatched String: Hi\n```\n\n\n```python\ntext = \"She said, 'Hello', and he replied, 'Hi'\"\npattern = \"'(.+)'\"\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"Matched String: {match}\")\n```\n\n```bash\nMatched String: Hello', and he replied, 'Hi\n```\n\n## Case 3B: Importance of Escaping Paranthesis!!\n\n- What if you want to capture text within paranthesis?\n\n```python\ntext = \"She said, (Hello), and he replied, (Hi)\"\npattern = \"\\((.+?)\\)\"\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"Matched String: {match}\")\n```\n\n```bash\nMatched String: Hello\nMatched String: Hi\n```\n\n\n## Case 4: Splitting Sentences using Regex\n\n- Use of `[^<patterns>]` to look for Negative matches until we meet any of the `<patterns>`\n\n```python\ntext = \"Hello! My Name is Senthil. How are you doing?\"\npattern = r\"([^.?!]+[.?!])\"\nsentences = re.findall(pattern, text)\nfor sentence in sentences:\n    print(f\"Sentence: {sentence.strip()}\")\n```\n\n\n```bash\nSentence: Hello!\nSentence: My Name is Senthil.\nSentence: How are you doing?\n```\n\n\n## Case 5: Extraction of different URL Formats\n\n- Multiple Concepts: Operator OR `|`; `?` for 0 or 1 match; `[^/\\s]+` means anything but a `/` or a space\n\n```python\ntext = \"Visit my website at https://www.example.com and check out www.blog.example.com or http://blogspot.com\"\npattern = r\"https?://[^/\\s]+|www.[^/\\s]+\"\nmatches = re.findall(pattern, text)\nfor match in matches:\n    print(f\"URL: {match}\")\n```\n\n\n```bash\nURL: https://www.example.com\nURL: www.blog.example.com\nURL: http://blogspot.com\n```\n\n# Where Regex Fails!\n\n## Bonus Case - The Repeating Patterns - Extracting html tags\n\n- The expectation for below python code is to capture all tags and and their contents. \n- But regex will capture only the outermost `<div>` tag\n\n```python\nhtml = \"<div><p>This is a paragraph</p><span>This is a span</span></div>\"\npattern = r\"<(.+?)>(.+?)</\\1>\"\nmatches = re.findall(pattern, html)\nfor match in matches:\n    tag = match[0]\n    content = match[1]\n    print(f\"Tag: {tag}, Content: {content}\")\n```\n\n\n```bash\nTag: div, Content: <p>This is a paragraph</p><span>This is a span</span>\n```\n\n\n## Best Solution - Use specific modules (avoid regex) \n- In this html parsing case, use `BeautifulSoup`\n\n```python\nfrom bs4 import BeautifulSoup\n\nhtml = \"<div><p>This is a paragraph</p><span>This is a span</span></div>\"\nsoup = BeautifulSoup(html, 'html.parser')\n\ndef process_tags(element):\n    if not element.name.startswith(r\"[\"):\n        print(f\"Tag: {element.name}, Content: {element.get_text()}\")\n    for child in element.children:\n        if child.name:\n            process_tags(child)\n\nprocess_tags(soup)\n```\n\n```bash\nTag: div, Content: This is a paragraphThis is a span\nTag: p, Content: This is a paragraph\nTag: span, Content: This is a span\n```\n\n## Insisting on a Regex Solution?\n\n```python\nfetch_tags_pattern = r\"\\<(\\w+)\\>\"\ntag_matches = re.findall(fetch_tags_pattern, html)\n\nfor tag in tag_matches:\n    tag_pattern = f\"<({tag})>(.*?)</{tag}>\"\n    matches = re.findall(tag_pattern, html)\n    for match in matches:\n        tag = match[0]\n        content = re.sub('(<.*?>)',' ',match[1])\n        print(f\"Tag: {tag}, Content: {content}\")\n```\n\n```bash\nTag: div, Content:  This is a paragraph  This is a span \nTag: p, Content: This is a paragraph\nTag: span, Content: This is a span\n```\n\n# Conclusion\n\n- I am sure, over years you had worked on Regex, you have many better examples\n- Like Bash Scripting, the key with Regex is to know when to stop trying it and use some other solution\n- Thank you for reading this blog piece, Happy Regexing !\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"2022-11-08-ubiquitous-regex.html","toc":true},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.336","theme":"cosmo","title-block-banner":true,"comments":{"utterances":{"repo":"senthilkumarm1901/QuartoBlogComments"}},"author":"Senthil Kumar","badges":true,"branch":"master","categories":["Coding","Python"],"date":"2022-11-08","description":"A selected list of confusing Regex Patterns that helped me learn its working better","title":"An Ode to the Ubiquitous Regex","image":"images/regex/regex.jpeg"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}