{"title":"PyTorch Fundamentals for NLP - Part 1","markdown":{"yaml":{"aliases":["/pytorch_for_nlp/2021/08/28/Pytorch_for_NLP_PART_I"],"author":"Senthil Kumar","badges":true,"branch":"master","categories":["NLP","Coding"],"date":"2021-08-28","description":"This blog post explains the use of PyTorch for building a bow-based Text Classifier","hide":false,"image":"images/pytorch_nn/linear_bag_of_words_based_text_classifier.png","output-file":"2021-08-28-pytorch_for_nlp_part_i.html","title":"PyTorch Fundamentals for NLP - Part 1","toc":true},"headingText":"1. Introduction","containsRefs":false,"markdown":"\n\n\n\n\n**Why `NLP` has grown in recent years?**\n- Because of the improvement in the ability of Language Models (such as `BERT` or `GPT-3`) to accurately `understand` human language\n- Easy to train these LMs as they learn from performing `unsupervised pretraining` tasks \n\n**What are the common types of NLP Applications for which NNs are built?**\n- `Text Classification` | E.g.: Email Spam classification, Intent Classification of incomming messages in Chatbots\n- `Sentiment Analysis` | A regression task (outputs a number from most negative `-1` to most positive `+1` | Note: Training data needs to have outputs in range too)\n- `NER` | a component of `Information Retrieval` | We classify every token (typically tokens that are proper nouns) a pre-defined entity which is then used for some downstream\n- `NER` and `Intent Classification` can be used together with intent classification\n    - E.g.: \"*Ok Google, Search apartments in Thoraipakam*\"\n    - **Intent**: Search | Entity_1 (search_entity) `apartments` | Entity_2 (search_filter_location) `Thoraipakkam` \n- `Text Summarization`\n- `Question-Answer` Systems | Typicall Closed domain system where in the answer to a question is in the context\n    - **Context**: \"*Joe Biden became US President in 2021 succedding Donald Trump*\"\n    - **Query**: \"*Who was the President of the US before Joe Biden*\"\n\nIn this blog piece, let us cover \n- `text classification` task using a `bow` based vectorizer + `nn.Linear` layer\n\n## 2.Representing Text as Tensors - A Quick Introduction\n\n**How do computers represent text?**\n- Using encodings such as ASCII values to represent each character\n\n![](https://raw.githubusercontent.com/MicrosoftDocs/pytorchfundamentals/main/nlp-pytorch/images/ascii-character-map.png)\n\nSource: github.com/MicrosoftDocs/pytorchfundamentals\n\n\n> Still computers cannot `interpret` the meaning of the words , they just `represent` text as ascii numbers in the above image\n\n\n**How is text converted into embeddings?** <br>\n\n- Two types of representations to convert text into numbers\n\n    - Character-level representation\n    - Word-level representation\n    - Token or sub-word level representation\n    \n- While Character-level and Word-level representations are self explanatory, Token-level representation is a combination of the above two approaches. \n\n<u>Some important terms</u>: <br>\n\n- **Tokenization** (sentence/text --> tokens): In the case sub-word level representations, for example, `unfriendly` will be **tokenized** as `un, #friend, #ly` where `#` indicates the token is a continuation of previous token. \n- This way of tokenization can make the model learnt/trained representations for `friend` and `unfriendly` to be closer to each other in the vector spacy\n\n- **Numericalization** (tokens --> numericals): This is the step where we convert tokens into integers.\n\n- **Vectorization** (numericals --> vectors): This is the process of creating vectors (typically sparse and equal to the length of the vocabulary of the corpus analyzed)\n\n- **Embedding** (numericals --> embeddings): For text data, embedding is a lower dimensional equivalent of a higher dimensional sparse vector. Embeddings are typically dense. Vectors are sparse. \n\n<br>\n\n**Typical Process of Embedding Creation** <br>\n- `text_data` >> `tokens` >> `numericals` >> sparse `vectors` or dense `embeddings` \n\n## 3. A Text Classification Pipeline to build BoW Classifier\n\n- Dataset considered: **AG_NEWS** dataset that consists of 4 classes - `World, Sports, Business and Sci/Tech`\n\n┣━━ **1.Loading dataset** <br>\n┃   ┣━━ `torch.data.utils.datasets.AG_NEWS` <br>\n┣━━ **2.Load Tokenization** <br>\n┃   ┣━━ `torchtext.data.utils.get_tokenizer('basic_english')` <br>\n┣━━ **3.Build vocabulary** <br>\n┃   ┣━━ `torchtext.vocab.build_vocab_from_iterator(train_iterator)` <br>\n┣━━ **4.Create BoW supporting functions**<br>\n┃   ┣━━ Convert `text_2_BoW_vector` <br>\n┃   ┣━━ Create `collate_fn` to create a pair of label-feature tensors for every minibatch <br>\n┣━━ **5.Create train, validation and test `DataLoaders`**<br>\n┣━━ **6.Define `Model_Architecture`**<br>\n┣━━ **7.define `training_loop` and `testing_loop` functions**<br>\n┣━━ **8.Train the model and Evaluate on Test Data**<br>\n┣━━ **9.Test the model on sample text**<br>\n\nImporting basic modules\n\n#### 3.1. Loading dataset\n\n#### 3.2. Loading Tokenizer\n\n#### 3.3. Building Vocabulary\n\nLooking at some sample data\n\n#### 3.4. Creating BoW related functions\n\n- The text pipeline purpose is `to convert text into tokens`\n- the label pipeline is to have labels from 0 to 3\n\nIn **Bag of Words (BOW)** representation, <br> \n- each word is linked to a vector index \n- where the vector value in that index is the frequency of occurrence of the word in the given document\n\n![](https://github.com/MicrosoftDocs/pytorchfundamentals/blob/main/nlp-pytorch/images/bag-of-words-example.png?raw=true)\n\nSource: Microsoft Docs\n\n##### 3.4.1 Creating `text_2_bow_vector`\n\n##### 3.4.2 Create Collate Function\n\n#### 3.5. Prepare DataLoaders\n\n### 3.6. Model Architecture\n\n### 3.7. Define `train_loop` and `test_loop` functions\n\n### 3.8 Training the Model\n\n### 3.9.Test the model on sample text \n\n## 4. Conclusion\n\n- In this blog piece, we looked at how bow vectorizer was used as input to build a shallow NN (without non-linear activation function) classification. \n- In the next parts to this Pytorch series, I will cover better ways to build a text classification NN model from scratch\n\nSources <br>\n\n- MSFT PyTorch NLP Course | [link](https://docs.microsoft.com/en-us/learn/modules/intro-natural-language-processing-pytorch/)\n- MSFT PyTorch Course - BoW Classifier | [link](https://docs.microsoft.com/en-us/learn/modules/intro-natural-language-processing-pytorch/3-bow-tfidf)\n- Torchtext Tutorial on Text Classification | [link](https://pytorch.org/tutorials/beginner/text_sentiment_ngrams_tutorial.html)\n\n<hr>\n","srcMarkdownNoYaml":"\n\n\n\n## 1. Introduction\n\n**Why `NLP` has grown in recent years?**\n- Because of the improvement in the ability of Language Models (such as `BERT` or `GPT-3`) to accurately `understand` human language\n- Easy to train these LMs as they learn from performing `unsupervised pretraining` tasks \n\n**What are the common types of NLP Applications for which NNs are built?**\n- `Text Classification` | E.g.: Email Spam classification, Intent Classification of incomming messages in Chatbots\n- `Sentiment Analysis` | A regression task (outputs a number from most negative `-1` to most positive `+1` | Note: Training data needs to have outputs in range too)\n- `NER` | a component of `Information Retrieval` | We classify every token (typically tokens that are proper nouns) a pre-defined entity which is then used for some downstream\n- `NER` and `Intent Classification` can be used together with intent classification\n    - E.g.: \"*Ok Google, Search apartments in Thoraipakam*\"\n    - **Intent**: Search | Entity_1 (search_entity) `apartments` | Entity_2 (search_filter_location) `Thoraipakkam` \n- `Text Summarization`\n- `Question-Answer` Systems | Typicall Closed domain system where in the answer to a question is in the context\n    - **Context**: \"*Joe Biden became US President in 2021 succedding Donald Trump*\"\n    - **Query**: \"*Who was the President of the US before Joe Biden*\"\n\nIn this blog piece, let us cover \n- `text classification` task using a `bow` based vectorizer + `nn.Linear` layer\n\n## 2.Representing Text as Tensors - A Quick Introduction\n\n**How do computers represent text?**\n- Using encodings such as ASCII values to represent each character\n\n![](https://raw.githubusercontent.com/MicrosoftDocs/pytorchfundamentals/main/nlp-pytorch/images/ascii-character-map.png)\n\nSource: github.com/MicrosoftDocs/pytorchfundamentals\n\n\n> Still computers cannot `interpret` the meaning of the words , they just `represent` text as ascii numbers in the above image\n\n\n**How is text converted into embeddings?** <br>\n\n- Two types of representations to convert text into numbers\n\n    - Character-level representation\n    - Word-level representation\n    - Token or sub-word level representation\n    \n- While Character-level and Word-level representations are self explanatory, Token-level representation is a combination of the above two approaches. \n\n<u>Some important terms</u>: <br>\n\n- **Tokenization** (sentence/text --> tokens): In the case sub-word level representations, for example, `unfriendly` will be **tokenized** as `un, #friend, #ly` where `#` indicates the token is a continuation of previous token. \n- This way of tokenization can make the model learnt/trained representations for `friend` and `unfriendly` to be closer to each other in the vector spacy\n\n- **Numericalization** (tokens --> numericals): This is the step where we convert tokens into integers.\n\n- **Vectorization** (numericals --> vectors): This is the process of creating vectors (typically sparse and equal to the length of the vocabulary of the corpus analyzed)\n\n- **Embedding** (numericals --> embeddings): For text data, embedding is a lower dimensional equivalent of a higher dimensional sparse vector. Embeddings are typically dense. Vectors are sparse. \n\n<br>\n\n**Typical Process of Embedding Creation** <br>\n- `text_data` >> `tokens` >> `numericals` >> sparse `vectors` or dense `embeddings` \n\n## 3. A Text Classification Pipeline to build BoW Classifier\n\n- Dataset considered: **AG_NEWS** dataset that consists of 4 classes - `World, Sports, Business and Sci/Tech`\n\n┣━━ **1.Loading dataset** <br>\n┃   ┣━━ `torch.data.utils.datasets.AG_NEWS` <br>\n┣━━ **2.Load Tokenization** <br>\n┃   ┣━━ `torchtext.data.utils.get_tokenizer('basic_english')` <br>\n┣━━ **3.Build vocabulary** <br>\n┃   ┣━━ `torchtext.vocab.build_vocab_from_iterator(train_iterator)` <br>\n┣━━ **4.Create BoW supporting functions**<br>\n┃   ┣━━ Convert `text_2_BoW_vector` <br>\n┃   ┣━━ Create `collate_fn` to create a pair of label-feature tensors for every minibatch <br>\n┣━━ **5.Create train, validation and test `DataLoaders`**<br>\n┣━━ **6.Define `Model_Architecture`**<br>\n┣━━ **7.define `training_loop` and `testing_loop` functions**<br>\n┣━━ **8.Train the model and Evaluate on Test Data**<br>\n┣━━ **9.Test the model on sample text**<br>\n\nImporting basic modules\n\n#### 3.1. Loading dataset\n\n#### 3.2. Loading Tokenizer\n\n#### 3.3. Building Vocabulary\n\nLooking at some sample data\n\n#### 3.4. Creating BoW related functions\n\n- The text pipeline purpose is `to convert text into tokens`\n- the label pipeline is to have labels from 0 to 3\n\nIn **Bag of Words (BOW)** representation, <br> \n- each word is linked to a vector index \n- where the vector value in that index is the frequency of occurrence of the word in the given document\n\n![](https://github.com/MicrosoftDocs/pytorchfundamentals/blob/main/nlp-pytorch/images/bag-of-words-example.png?raw=true)\n\nSource: Microsoft Docs\n\n##### 3.4.1 Creating `text_2_bow_vector`\n\n##### 3.4.2 Create Collate Function\n\n#### 3.5. Prepare DataLoaders\n\n### 3.6. Model Architecture\n\n### 3.7. Define `train_loop` and `test_loop` functions\n\n### 3.8 Training the Model\n\n### 3.9.Test the model on sample text \n\n## 4. Conclusion\n\n- In this blog piece, we looked at how bow vectorizer was used as input to build a shallow NN (without non-linear activation function) classification. \n- In the next parts to this Pytorch series, I will cover better ways to build a text classification NN model from scratch\n\nSources <br>\n\n- MSFT PyTorch NLP Course | [link](https://docs.microsoft.com/en-us/learn/modules/intro-natural-language-processing-pytorch/)\n- MSFT PyTorch Course - BoW Classifier | [link](https://docs.microsoft.com/en-us/learn/modules/intro-natural-language-processing-pytorch/3-bow-tfidf)\n- Torchtext Tutorial on Text Classification | [link](https://pytorch.org/tutorials/beginner/text_sentiment_ngrams_tutorial.html)\n\n<hr>\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles.css"],"output-file":"2021-08-28-pytorch_for_nlp_part_i.html","toc":true},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.336","theme":"cosmo","title-block-banner":true,"comments":{"utterances":{"repo":"senthilkumarm1901/QuartoBlogComments"}},"aliases":["/pytorch_for_nlp/2021/08/28/Pytorch_for_NLP_PART_I"],"author":"Senthil Kumar","badges":true,"branch":"master","categories":["NLP","Coding"],"date":"2021-08-28","description":"This blog post explains the use of PyTorch for building a bow-based Text Classifier","hide":false,"image":"images/pytorch_nn/linear_bag_of_words_based_text_classifier.png","title":"PyTorch Fundamentals for NLP - Part 1"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}